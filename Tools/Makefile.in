## Variables set by configure 
OPENCV_DIRECTORY    = @OPENCVDIR@
HDF5_DIRECTORY      = @HDF5DIR@
HDF5_INC_DIRECTORY  = @HDF5INCDIR@
TAGGERDIR           = @TAGGERDIR@
SUSYANATOOLSDIR     = @SUSYANATOOLSDIR@

CXX       = @CXX@
LD        = @CXX@
CXXFLAGS  = @CXXFLAGS@
LDFLAGS   = @LDFLAGS@
PREFIX    = @prefix@
LDCONFIG  = @LDCONFIG@
LIBSUFFIX = @LIBSUFFIX@
##End variables set by configure

# directory to put intermediate files 
ODIR       = obj
IDIR       = $(TAGGERDIR)/Tools/cpp
SDIR       = $(TAGGERDIR)/Tools/cpp
RSDIR      = $(SUSYANATOOLSDIR)/Tools/
RIDIR      = $(SUSYANATOOLSDIR)/Tools

# Top tagger includes
INCLUDESDIRS  += -I. -I$(TAGGERDIR)/..

# Top tagger source diretoriess
TTIDIR     = $(TAGGERDIR)/TopTagger/include
TPIDIR     = $(TAGGERDIR)/CfgParser/include

#openCV include dirs
INCLUDESDIRS  += -I$(OPENCV_DIRECTORY)/include/ -I$(OPENCV_DIRECTORY)/modules/core/include 
INCLUDESDIRS  += -I$(OPENCV_DIRECTORY)/modules/video/include -I$(OPENCV_DIRECTORY)/modules/objdetect/include 
INCLUDESDIRS  += -I$(OPENCV_DIRECTORY)/modules/ml/include/ -I$(OPENCV_DIRECTORY)/modules/photo/include/ 
INCLUDESDIRS  += -I$(OPENCV_DIRECTORY)/modules/imgproc/include/
INCLUDESDIRS  += -I$(OPENCV_DIRECTORY)

#hdf5 include dir
INCLUDESDIRS  += -I$(HDF5_DIRECTORY)/$(HDF5_INC_DIRECTORY)

## Include ROOT
INCLUDESDIRS  += $(shell root-config --cflags)

## Enable for maximum warning
#CXXFLAGS += -Wall -Wextra -Weffc++

# Flags for generating auto dependancies 
CXXDEPFLAGS = -MMD -MP

#Necessary libraries, the order matters here!
# ROOT libraries
LIBS       = $(shell root-config --glibs)

# openCV libraries
LIBS      += -L$(OPENCV_DIRECTORY)/lib -lopencv_ml -lopencv_core

# hdf5 libs
LIBS += -L$(HDF5_DIRECTORY)/lib -lhdf5


# tagger libraries
LIBS      += -L$(TAGGERDIR)/TopTagger/test -lTopTagger

PROGRAMS = makeTrainingTuples # TagTest1 MVAstuff

all: mkobj sampPyWrap $(PROGRAMS)

mkobj:
	@mkdir -p obj

#code to compile shared library to link samples to python                                                                                                                               
sampPyWrap: $(ODIR)/samplesModule.so

$(ODIR)/samplesModule.so: $(ODIR)/samplesPyWrap.o $(ODIR)/samplesModulePyWrap.o
	$(CXX) -shared -o $@ $^

$(ODIR)/samplesPyWrap.o: $(RSDIR)/samples.cc $(RSDIR)/samples.h
	$(CXX) --std=c++11 -c -fPIC -o $@ $<

$(ODIR)/samplesModulePyWrap.o: $(RSDIR)/samplesModule.cc
	$(CXX) --std=c++11 -c -fPIC -o $@ $<


$(ODIR)/%.o : $(SDIR)/%.C
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS) -I$(IDIR) -I$(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(SDIR)/%.cc
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS) -I$(IDIR) -I$(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(SDIR)/%.cpp
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS) -I$(IDIR) -I$(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(RSDIR)/%.C
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS) -I$(ISDIR) -I$(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(RSDIR)/%.cc
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS) -I$(ISDIR) -I$(INCLUDESDIRS) -o $@ -c $<

$(ODIR)/%.o : $(RSDIR)/%.cpp
	$(CXX) $(CXXFLAGS) $(CXXDEPFLAGS) -I$(ISDIR) -I$(INCLUDESDIRS) -o $@ -c $<

makeTrainingTuples: $(ODIR)/NTupleReader.o $(ODIR)/SATException.o $(ODIR)/PlotUtility.o $(ODIR)/TaggerUtility.o $(ODIR)/samples.o $(ODIR)/MiniTupleMaker.o $(ODIR)/makeTrainingTuples.o $(ODIR)/customize.o
	$(LD) $^ $(LIBS) -o $@

openCVTest: $(ODIR)/NTupleReader.o $(ODIR)/SATException.o $(ODIR)/openCVTest.o 
	$(LD) $^ $(LIBS) -o $@

TagTest1: $(ODIR)/TagTest1.o $(ODIR)/NTupleReader.o $(ODIR)/SATException.o $(ODIR)/baselineDef.o $(ODIR)/customize.o $(ODIR)/samples.o $(ODIR)/TaggerUtility.o $(ODIR)/PlotUtility.o
	$(LD) $^ $(LIBS) -o $@

MVAstuff: $(ODIR)/MVAstuff.o $(ODIR)/NTupleReader.o $(ODIR)/SATException.o $(ODIR)/baselineDef.o $(ODIR)/customize.o $(ODIR)/samples.o $(ODIR)/TaggerUtility.o $(ODIR)/PlotUtility.o
	$(LD) $^ $(LIBS) -o $@

#yet another custom hack for tensorflow test, this is mostly so I don't forget the really overcomplicated compile method
TENSORFLOW_INC_DIR = /home/pastika/topTagger/tensorflow/
TENSORFLOW_LIB_DIR = /home/pastika/.cache/bazel/_bazel_pastika/4f8ff7227a7b1d742c9014b7037b5955/execroot/tensorflow/bazel-out/local-opt/bin/tensorflow/
tensorflowTest: tensorflowTest.cpp
	g++ -std=c++11 -I $(TENSORFLOW_INC_DIR) -L $(TENSORFLOW_LIB_DIR) $^ $(TENSORFLOW_LIB_DIR)/c/_objs/c_api/tensorflow/c/c_api.pic.o -ltensorflow -o $@

clean:
	rm -f $(ODIR)/*.o $(ODIR)/*.so $(ODIR)/*.d $(PROGRAMS) core 

-include $(ODIR)/*.d
